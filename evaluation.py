import torch
import numpy as np
from torch.utils.data import Dataset, DataLoader
from sklearn.metrics import roc_auc_score
from config import Config
from saint import PlusSAINTModule
import re

CKPT_PATH = 'saved_models/best_model-v3.ckpt'
BATCH_SIZE = 1

class EvaluationDataset(Dataset):
    def __init__(self, samples, max_seq):
        self.samples = samples
        self.max_seq = max_seq
    def __len__(self):
        return len(self.samples)
    def __getitem__(self, idx):
        s = self.samples[idx]
        seq_len = len(s['input_ids'])
        # padding
        input_ids = np.zeros(self.max_seq, dtype=np.int64)
        input_rtime = np.zeros(self.max_seq, dtype=np.int64)
        input_cat = np.zeros(self.max_seq, dtype=np.int64)
        labels = np.zeros(self.max_seq, dtype=np.int64)
        input_ids[-seq_len:] = s['input_ids']
        input_rtime[-seq_len:] = s['input_rtime']
        input_cat[-seq_len:] = s['input_cat']
        labels[-seq_len:] = s['labels']
        input = {
            'input_ids': torch.from_numpy(input_ids),
            'input_rtime': torch.from_numpy(input_rtime),
            'input_cat': torch.from_numpy(input_cat)
        }
        return input, torch.from_numpy(labels)

def evaluate(model, dataloader, device):
    model.eval()
    all_preds = []
    all_labels = []
    with torch.no_grad():
        for batch in dataloader:
            input, labels = batch
            for k in input:
                input[k] = input[k].to(device)
            labels = labels.to(device)
            target_mask = (input['input_ids'] != 0)
            out = model(input, labels)
            out = torch.masked_select(out, target_mask)
            out = torch.sigmoid(out)
            labels = torch.masked_select(labels, target_mask)
            all_preds.append(out.cpu().numpy())
            all_labels.append(labels.cpu().numpy())
            print(f"Batch predictions: {out.cpu().numpy()}")
            print(f"Batch labels: {labels.cpu().numpy()}")
    all_preds = np.concatenate(all_preds)
    all_labels = np.concatenate(all_labels)
    auc = roc_auc_score(all_labels, all_preds)
    print(f"Eval AUC: {auc:.6f}")
    return auc

def main():
    device = torch.device("cpu")
    samples = [
    # 样本 0
        {
            'input_ids': np.array([3909, 4142, 4853, 5738, 3986, 6102, 3566, 6659, 4466, 56, 110, 7892, 10448, 7970, 7976, 157, 10480, 4, 7968, 191, 10673, 2, 7963, 48, 819, 1322, 743, 10684, 434, 1230, 1044, 10687, 1343, 588, 1239, 1631, 1632, 1633, 2401, 2402, 2403, 1622, 1624, 1623, 11731, 11732, 11730, 1621, 1619, 1620, 3476, 3475, 3474, 3290, 3289, 3288, 2884, 2885, 2883, 2770, 2771, 2772, 3272, 3270, 3271, 6185, 4072, 5399, 9680, 4728, 5197, 5047, 8370, 6430, 4478, 4360, 11407, 5261, 4102, 9691, 9592, 3878, 6045, 3637, 8721, 6817, 6818, 6819, 6820, 6891, 6889, 6890, 6895, 6894, 6892, 6893, 10797, 10796, 10798, 10795], dtype=np.int64),
            'input_rtime': np.array([0, 0, 13, 12, 32, 23, 13, 10, 20, 14, 28, 23, 27, 21, 21, 15, 25, 23, 20, 27, 28, 22, 21, 15, 23, 23, 19, 14, 17, 23, 18, 17, 19, 15, 17, 18, 16, 16, 16, 29, 29, 29, 24, 24, 24, 30, 30, 30, 27, 27, 27, 38, 38, 38, 33, 33, 33, 29, 29, 29, 25, 25, 25, 26, 26, 26, 33, 25, 35, 16, 18, 26, 10, 25, 29, 17, 21, 20, 24, 18, 19, 13, 19, 18, 37, 15, 43, 43, 43, 43, 26, 26, 26, 28, 28, 28, 28, 22, 22, 22], dtype=np.int64),
            'input_cat': np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 65, 65, 65, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 68], dtype=np.int64),
            'labels': np.array([1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0], dtype=np.int64)
        },
        {
            'input_ids': np.array([ 5442,  4589,  6456,  5695,  6372,  3988,  4093,  7948,   110,    72,   134,   185,
  7863,   572,  1109,   591,   538,   731,   587,  1279,  1100,   632,   586,   880,
   886,   284,   831,  1369,   758,   762,   568,   787,   335,     2,  7859,  7910,
   144,     3,  7942,    50,   139,    15, 10435,  7930,  7860,   128, 10473,  7891,
    31,  7962, 10414,    52,  7879,   115, 10573,   593,   443,  1273,  7887, 10684,
   786,  1062,   315,  7975,   123, 10539,  7923,  7912,    41, 10589,  7877,   153,
   167, 10392,    66,   130,    20, 10400,  7936,   106,   165, 10640,   120,  7974,
   107,  7964,   157, 10616,   189, 10426, 10411,     6, 10681,    58, 
 10523,   186,  3368,  3367], dtype=np.int64),
            'input_rtime': np.array([ 0,  0, 16, 10, 34, 12, 27, 39, 34, 25, 31, 26, 26, 37, 25, 18, 19, 21, 25, 21, 20, 19, 19, 19,
 21, 20, 19, 30, 21, 18, 21, 19, 17, 26, 21, 29, 27, 16, 19, 20, 25, 24, 22, 22, 22, 19, 24, 21,
 27, 28, 23, 21, 24, 22, 24, 23, 22, 18, 20, 20, 26, 22, 21, 17, 17, 21, 25, 23, 26, 13, 21, 25,
 24, 32, 22, 22, 25, 24, 24, 23, 26, 24, 31, 43, 21, 29, 22, 29, 24, 23, 28, 25, 23, 25, 11, 24,
 26, 20], dtype=np.int64),
            'input_cat': np.array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
 97, 98], dtype=np.int64),
            'labels': np.array([1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1,
 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], dtype=np.int64)
        },
        {
            'input_ids': np.array([ 4589,  6456,  5695,  6372,  3988,  4093,  7948,   110,    72,   134,   185,  7863,
   572,  1109,   591,   538,   731,   587,  1279,  1100,   632,   586,   880,   886,
   284,   831,  1369,   758,   762,   568,   787,   335,     2,  7859,  7910,   144,
     3,  7942,    50,   139,    15, 10435,  7930,  7860,   128, 10473,  7891,    31,
  7962, 10414,    52,  7879,   115, 10573,   593,   443,  1273,  7887, 10684,   786,
  1062,   315,  7975,   123, 10539,  7923,  7912,    41, 10589,  7877,   153,   167,
 10392,    66,   130,    20, 10400,  7936,   106,   165, 10640,   120,  7974,   107,
  7964,   157, 10616,   189, 10426, 10411,     6, 10681], dtype=np.int64),
            'input_rtime': np.array([ 0, 16, 10, 34, 12, 27, 39, 34, 25, 31, 26, 26, 37, 25, 18, 19, 21, 25, 21, 20, 19, 19, 19, 21,
 20, 19, 30, 21, 18, 21, 19, 17, 26, 21, 29, 27, 16, 19, 20, 25, 24, 22, 22, 22, 19, 24, 21, 27,
 28, 23, 21, 24, 22, 24, 23, 22, 18, 20, 20, 26, 22, 21, 17, 17, 21, 25, 23, 26, 13, 21, 25, 24,
 32, 22, 22, 25, 24, 24, 23, 26, 24, 31, 43, 21, 29, 22, 29, 24, 23, 28, 25, 23], dtype=np.int64),
            'input_cat': np.array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], dtype=np.int64),
            'labels': np.array([0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,
 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1], dtype=np.int64)
        },
        {
            'input_ids': np.array([ 5880,  4046,   405,  5299,  5030,  4711,  4130,  9076,  3609,  9273,  3871,  9609,
  4852,  5287,  6750,  6752,  6751,  6749,  6633,  6635,  6634,  6636,  6494,  6495,
  6493,  6496, 11144, 11145, 11143, 11146,  6729,  6730,  6731,  6732,  2724,  2722,
  2723,  2864,  2862,  2863,  2593,  2594,  2595, 10734, 10735, 10736,  3504,  3506,
  3505,  6632,  6629,  6631,  6630,   117,   161,  7913, 10480,    13,   356,  1080,
  1211, 10687,  1262,  1000,  1341,   294,  1248,  1083,   725, 10688,   721,  1063,
   951,  2320,  2321,  2322,  1554,  1553,  1555,  6773,  6775,  6776,  6774, 10936,
 10935, 10938, 10937,  6583,  6581,  6582,  ], dtype=np.int64),
            'input_rtime': np.array([ 0, 13, 23, 32,  3, 14, 10, 13, 12, 12,  5, 43,  6, 12, 17, 14, 14, 14, 14, 23, 23, 23, 23, 40,
 40, 40, 40, 39, 39, 39, 39, 27, 27, 27, 27, 34, 34, 34, 22, 22, 22, 24, 24, 24, 26, 26, 26, 26,
 26, 26, 22, 22, 22, 22, 24, 27, 25, 22, 21, 21, 19, 16, 15, 17, 17, 17, 16, 15, 19, 14, 17, 18,
 15, 18, 16, 16, 16, 24, 24, 24, 26, 26, 26, 26, 42, 42, 42, 42, 23, 23, ], dtype=np.int64),
            'input_cat': np.array([ 3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19,
 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27,
 27, 28, 28, 28, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53,], dtype=np.int64),
            'labels': np.array([0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ], dtype=np.int64)
        },
        {
            'input_ids': np.array([ 4046,   405,  5299,  5030,  4711,  4130,  9076,  3609,  9273,  3871,  9609,  4852,
  5287,  6750,  6752,  6751,  6749,  6633,  6635,  6634,  6636,  6494,  6495,  6493,
  6496, 11144, 11145, 11143, 11146,  6729,  6730,  6731,  6732,  2724,  2722,  2723,
  2864,  2862,  2863,  2593,  2594,  2595, 10734, 10735, 10736,  3504,  3506,  3505,
  6632,  6629,  6631,  6630,   117,   161,  7913, 10480,    13,   356,  1080,  1211,
 10687,  1262,  1000,  1341,   294,  1248,  1083,   725, 10688,   721,  1063,   951,
  2320,  2321,  2322,  1554,  1553,  1555,  6773,  6775,  6776,  6774, 10936, 10935,
 10938, 10937,  6583,  6581,  6582,  6584,  6873,  6876,  6875,  6874,  6865,  6866,
  6868,  6867,  4258,  4384], dtype=np.int64),
            'input_rtime': np.array([ 0, 23, 32,  3, 14, 10, 13, 12, 12,  5, 43,  6, 12, 17, 14, 14, 14, 14, 23, 23, 23, 23, 40, 40,
 40, 40, 39, 39, 39, 39, 27, 27, 27, 27, 34, 34, 34, 22, 22, 22, 24, 24, 24, 26, 26, 26, 26, 26,
 26, 22, 22, 22, 22, 24, 27, 25, 22, 21, 21, 19, 16, 15, 17, 17, 17, 16, 15, 19, 14, 17, 18, 15,
 18, 16, 16, 16, 24, 24, 24, 26, 26, 26, 26, 42, 42, 42, 42, 23, 23, 23, 23, 20, 20, 20, 20, 21,
 21, 21, 21, 15], dtype=np.int64),
            'input_cat': np.array([ 4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19,
 19, 20, 20, 20, 20, 21, 21, 21, 21, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27,
 28, 28, 28, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
 49, 49, 49, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55,
 55, 55, 56, 57], dtype=np.int64),
            'labels': np.array([1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=np.int64)
        },
        {
            'input_ids': np.array([9839, 4416, 4718, 6185, 9254, 5581, 3852, 6422, 4129, 4821, 8303, 3632, 6125, 6444, 8440, 5177, 4989, 5154, 5154, 6125, 8343, 4412, 4637, 5565, 11292, 5666, 6784, 6782, 6783, 6781, 6809, 6812, 6810, 6811, 5339, 4118, 8685, 5714, 3728, 5334, 8838, 5713, 4446, 4100, 9400, 3846, 4406, 4408, 8697, 4667, 9285, 5706, 11343, 4031, 8470, 4664, 8929, 9264, 6425, 5782, 11278, 4682, 3721, 6316, 11330, 6005, 6475, 3757, 9218, 5223, 5247, 4256, 11525, 5453, 5158, 5263, 9521, 4997, 4134, 5717, 9227, 3603, 5481, 338, 813, 379, 10687, 1167, 1111, 1025, 10684, 772, 462, 4256, 4637, 3728, 8470, 5154, 1025], dtype=np.int64),
            'input_rtime': np.array([0, 46, 34, 33, 23, 8, 3, 13, 36, 23, 15, 6, 31, 35, 25, 30, 25, 28, 42, 16, 15, 10, 55, 13, 8, 35, 34, 13, 13, 13, 13, 54, 54, 54, 54, 49, 5, 9, 40, 11, 13, 18, 18, 16, 16, 31, 38, 8, 30, 32, 25, 59, 37, 22, 42, 16, 21, 17, 69, 26, 58, 4, 32, 13, 30, 29, 7, 22, 32, 26, 47, 35, 225, 26, 69, 28, 15, 8, 31, 21, 15, 13, 41, 36, 12, 19, 18, 9, 18, 19, 17, 17, 23, 15, 16, 8, 12, 8, 8], dtype=np.int64),
            'input_cat': np.array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 27, 30, 31, 32, 33, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], dtype=np.int64),
            'labels': np.array([0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], dtype=np.int64)
        }]
    print(f'Total samples: {len(samples)}')
    dataset = EvaluationDataset(samples, max_seq=Config.MAX_SEQ)
    dataloader = DataLoader(dataset, batch_size=BATCH_SIZE, shuffle=False)
    print('Loading model...')
    model = PlusSAINTModule()
    checkpoint = torch.load(CKPT_PATH, map_location=device)
    model.load_state_dict(checkpoint['state_dict'] if 'state_dict' in checkpoint else checkpoint)
    model.to(device)
    print('Evaluating...')
    evaluate(model, dataloader, device)

if __name__ == '__main__':
    main() 